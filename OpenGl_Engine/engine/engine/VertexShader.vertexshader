#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normals;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 gouraudColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform vec3 ambient, diffuse, specular, lightPosition;
uniform float shininess;


void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;

	vec3 position = gl_Position.xyz;
	vec3 distance = normalize(lightPosition - position);
	vec3 lightVector = normalize(-position);
	vec3 reflect = normalize(distance + lightVector);
	vec3 N = normals;
	vec3 norm = normalize(MVP * vec4(normals, 0)).xyz;
	vec3 A = ambient;
	vec3 D = max(dot(distance, norm), 0.0) * diffuse;
	vec3 S = pow(max(dot(norm,reflect), 0.0), shininess) * specular;

	gouraudColor = vec3(0.3,0.0,0.4); //min(A+D+S, 1.0);
}

